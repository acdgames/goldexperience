[
null,
{"id":1,"autoRemovalTiming":0,"chanceByDamage":100,"iconIndex":1,"maxTurns":1,"message1":" has fallen!","message2":" is slain!","message3":"","message4":" revives!","minTurns":1,"motion":3,"name":"Knockout","note":"","overlay":0,"priority":100,"releaseByDamage":false,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100,"traits":[]},
{"id":2,"autoRemovalTiming":2,"chanceByDamage":100,"description":"","iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Guard","note":"","overlay":0,"priority":0,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":true,"removeByWalking":false,"restriction":0,"stepsToRemove":100,"traits":[{"code":62,"dataId":1,"value":0}]},
{"id":3,"autoRemovalTiming":0,"chanceByDamage":100,"description":"","iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Immortal","note":"","overlay":0,"priority":0,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100,"traits":[{"code":14,"dataId":1,"value":0}]},
{"id":4,"autoRemovalTiming":0,"chanceByDamage":100,"iconIndex":2,"maxTurns":1,"message1":" is poisoned!","message2":" is poisoned!","message3":"","message4":" is no longer poisoned!","minTurns":1,"motion":1,"overlay":1,"name":"Poison","note":"","priority":50,"releaseByDamage":false,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100,"traits":[{"code":22,"dataId":7,"value":-0.1}]},
{"id":5,"autoRemovalTiming":1,"chanceByDamage":100,"iconIndex":3,"maxTurns":5,"message1":" is blinded!","message2":" is blinded!","message3":"","message4":" is no longer blinded!","minTurns":3,"motion":1,"name":"Blind","note":"","overlay":2,"priority":60,"releaseByDamage":false,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100,"traits":[{"code":22,"dataId":0,"value":-0.5}]},
{"id":6,"autoRemovalTiming":1,"chanceByDamage":100,"iconIndex":4,"maxTurns":5,"message1":" is silenced!","message2":" is silenced!","message3":"","message4":" is no longer silenced!","minTurns":3,"motion":1,"name":"Silence","note":"","overlay":3,"priority":65,"releaseByDamage":false,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100,"traits":[{"code":42,"dataId":1,"value":0}]},
{"id":7,"autoRemovalTiming":1,"chanceByDamage":50,"iconIndex":5,"maxTurns":4,"message1":" is enraged!","message2":" is enraged!","message3":"","message4":" is no longer enraged!","minTurns":2,"motion":1,"name":"Rage","note":"","overlay":4,"priority":70,"releaseByDamage":false,"removeAtBattleEnd":true,"removeByDamage":true,"removeByRestriction":false,"removeByWalking":false,"restriction":1,"stepsToRemove":100,"traits":[]},
{"id":8,"autoRemovalTiming":1,"chanceByDamage":50,"iconIndex":6,"maxTurns":4,"message1":" is confused!","message2":" is confused!","message3":"","message4":" is no longer confused!","minTurns":2,"motion":1,"name":"Confusion","note":"","overlay":5,"priority":75,"releaseByDamage":false,"removeAtBattleEnd":true,"removeByDamage":true,"removeByRestriction":false,"removeByWalking":false,"restriction":2,"stepsToRemove":100,"traits":[]},
{"id":9,"autoRemovalTiming":1,"chanceByDamage":50,"iconIndex":7,"maxTurns":4,"message1":" is fascinated!","message2":" is fascinated!","message3":"","message4":" is no longer fascinated!","minTurns":2,"motion":1,"name":"Fascination","note":"","overlay":6,"priority":80,"releaseByDamage":false,"removeAtBattleEnd":true,"removeByDamage":true,"removeByRestriction":false,"removeByWalking":false,"restriction":3,"stepsToRemove":100,"traits":[]},
{"id":10,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Basic Attack","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":11,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":74,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Front Row","note":"<element_boost:3 .75>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":12,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":11,"dataId":1,"value":0.8},{"code":44,"dataId":11,"value":1}],"iconIndex":75,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Mid Row","note":"<element_boost:1 0>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":13,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":11,"dataId":1,"value":0.6},{"code":11,"dataId":2,"value":0.75},{"code":44,"dataId":11,"value":1},{"code":44,"dataId":12,"value":1}],"iconIndex":73,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Back Row","note":"<element_boost:1 0>\n<element_boost:2 0>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":14,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"-----------------------","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":15,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":22,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":2,"name":"Downed","note":"<noExtraElemenWeaknessAction>\n<Reapply Ignore Turns>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":16,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":23,"dataId":6,"value":1.3},{"code":23,"dataId":7,"value":1.3}],"iconIndex":24,"maxTurns":2,"message1":"","message2":"","message3":"","message4":"","minTurns":2,"motion":3,"name":"Knocked Out","note":"<noExtraElemenWeaknessAction>\n<Reapply Ignore Turns>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":17,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":43,"dataId":8,"value":1},{"code":14,"dataId":18,"value":1}],"iconIndex":29,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Ascend","note":"<Skill Tier 1 Slots: +1>\n\n<Custom Apply Effect>\nvar selfid = origin.actorId();\nvar freeslot = $gameActors.actor(selfid).getEquipSkillTierCount(1);\nfreeslot += 1;\n$gameActors.actor(selfid).equipSkill(8,freeslot);\n</Custom Apply Effect>\n\n<Custom Leave Effect>\nvar selfid = origin.actorId();\n$gameActors.actor(selfid).equipSkill(8);\n</Custom Leave Effect>\n\n<Custom Remove Effect>\nvar selfid = origin.actorId();\n$gameActors.actor(selfid).equipSkill(8);\n</Custom Remove Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":18,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":61,"dataId":0,"value":1},{"code":21,"dataId":2,"value":1.5},{"code":21,"dataId":4,"value":1.5},{"code":21,"dataId":6,"value":10}],"iconIndex":29,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Ascend 2","note":"<reAddBattler>\n\n<Custom Apply Effect>\nif (origin.isStateAffected(89)) {\ntarget.addState(90);\n}\n</Custom Apply Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":19,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"-----------------------","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":20,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":22,"dataId":7,"value":-0.05}],"iconIndex":21,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":1,"name":"Burn","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":21,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":3,"value":0}],"iconIndex":27,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":1,"name":"Frozen","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":true,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":22,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":25,"maxTurns":2,"message1":"","message2":"","message3":"","message4":"","minTurns":2,"motion":1,"name":"Shock","note":"","overlay":8,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":23,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":22,"dataId":0,"value":-0.5}],"iconIndex":19,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":1,"name":"Blind","note":"","overlay":2,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":24,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":42,"dataId":1,"value":1},{"code":42,"dataId":2,"value":1}],"iconIndex":20,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":1,"name":"Silence","note":"","overlay":3,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":25,"autoRemovalTiming":2,"chanceByDamage":100,"traits":[{"code":22,"dataId":7,"value":0.05},{"code":22,"dataId":8,"value":0.05}],"iconIndex":24,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":2,"name":"Sleep","note":"<Custom Select Effect>\n// Get the current skill\nvar skill = this.item();\n// Check if the skill exists and can deal critical damage\nif (skill && skill.damage.critical) {\n  // Get the previous Critical Hit settings\n  this._prevForcedCriticalHit = $gameSystem._forceCritical;\n  this._prevForcedNoCriticalHit = $gameSystem._forceNoCritical;\n  // Force the hit to be a critical hit\n  BattleManager.actionForceCritical();\n}\n</Custom Select Effect>\n\n<Custom Deselect Effect>\n// Check if the previous settings exist\nif (this._prevForcedCriticalHit !== undefined) {\n  // Revert the Critical Hit settings to what they were before\n  $gameSystem._forceCritical = this._prevForcedCriticalHit;\n  $gameSystem._forceNoCritical = this._prevForcedNoCriticalHit;\n}\n</Custom Deselect Effect>","overlay":7,"priority":50,"removeAtBattleEnd":true,"removeByDamage":true,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":26,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":22,"dataId":7,"value":-0.03},{"code":21,"dataId":2,"value":0.5},{"code":21,"dataId":4,"value":0.5}],"iconIndex":18,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":1,"name":"Poison","note":"","overlay":1,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":27,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":22,"maxTurns":2,"message1":"","message2":"","message3":"","message4":"","minTurns":2,"motion":1,"name":"Panic","note":"<confusion edit: true, true>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":28,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":23,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":1,"name":"Charmed","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":29,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":2,"value":2},{"code":22,"dataId":0,"value":-0.5},{"code":23,"dataId":6,"value":1.5},{"code":23,"dataId":7,"value":1.5},{"code":23,"dataId":9,"value":0}],"iconIndex":21,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Berserk","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":30,"autoRemovalTiming":2,"chanceByDamage":100,"traits":[],"iconIndex":30,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Fear","note":"// Disables instant skills from paralyze as to not abuse the mechanic.\n<Cancel Instant Skill: 1 to 2000>\n<Cancel Instant Item: 1 to 2000>\n\n<Custom Action Start Effect>\n// Set the paralyze success rate.\nvar paralyzeRate = 0.25;\n// Make a random number check to see if paralyze passes...\nif (Math.random() < paralyzeRate) {\n  // If it does, play the paralyze animation on the target.\n  user.startAnimation(64);\n  // Check for the user's current action...\n  if (user.currentAction()) {\n    // And make the user consume its resources.\n    user.useItem(user.currentAction().item());\n  }\n  // Clear the user's actions making the user lose the actions.\n  user.clearActions();\n  // Get the log window from battle.\n  var logWindow = SceneManager._scene._logWindow;\n  // Check if the paralyze state has text in message 3\n  if (state.message3) {\n    // If it does, create a message based on it.\n    var msg = '<CENTER>' + user.name() + state.message3;\n    // Add the text to the log window to display in battle.\n    logWindow.addText(msg);\n  }\n  // Make the battle wait for the paralysis animation to finish playing.\n  BattleManager.actionWaitForAnimation();\n  // Clear the log window.\n  logWindow.push('clear');\n}\n</Custom Action Start Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":31,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":22,"dataId":8,"value":-0.12},{"code":22,"dataId":9,"value":-0.5}],"iconIndex":26,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Despair","note":"<Custom Leave Effect>\n// Get the death state for the user.\nvar deathState = user.deathStateId();\n// Check if the user is not immune to death nor resistant to it.\nif (user.stateRate(deathState) > 0.01 && !user.isStateResist(deathState)) {\n  // Play animation on the user.\n  user.startAnimation(65);\n  // Set the user's HP to 0.\n  user.setHp(0);\n  // Check if the user is dead.\n  if (user.isDead()) {\n    // Make the user collapse.\n    user.performCollapse();\n  }\n}\n</Custom Leave Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":4,"stepsToRemove":100},
{"id":32,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":2,"value":0.5},{"code":21,"dataId":4,"value":0.5},{"code":21,"dataId":3,"value":0.5},{"code":21,"dataId":5,"value":0.5},{"code":21,"dataId":6,"value":0.5}],"iconIndex":31,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":1,"name":"Exhausted","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":33,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":3,"value":0.5},{"code":21,"dataId":5,"value":0.5},{"code":22,"dataId":8,"value":-0.1}],"iconIndex":31,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":1,"name":"Exhausted","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":34,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":23,"dataId":2,"value":0.4}],"iconIndex":48,"maxTurns":2,"message1":"","message2":"","message3":"","message4":"","minTurns":2,"motion":0,"name":"Grevious Wounds","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":35,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":14,"dataId":20,"value":1},{"code":14,"dataId":21,"value":1},{"code":14,"dataId":22,"value":1},{"code":14,"dataId":23,"value":1},{"code":14,"dataId":24,"value":1},{"code":14,"dataId":25,"value":1},{"code":14,"dataId":26,"value":1},{"code":14,"dataId":27,"value":1},{"code":14,"dataId":28,"value":1},{"code":14,"dataId":30,"value":1},{"code":14,"dataId":31,"value":1},{"code":14,"dataId":107,"value":1},{"code":14,"dataId":41,"value":1},{"code":14,"dataId":111,"value":1}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Boss Status","note":"Mark Bosses with this Status for effects \nwith unique Boss interactions, such as damage\ncaps.\n\n<Max maxhp Buff: +7>\n<Max maxmp Buff: +7>\n<Max atk Buff: +7>\n<Max def Buff: +7>\n<Max mat Buff: +7>\n<Max mdf Buff: +7>\n<Max agi Buff: +7>\n<Max luk Buff: +7>\n\n<Ignore Physical Taunt>\n<Ignore Magical Taunt>\n<Ignore Certain Taunt>\n\n<Custom Action End Effect>\nvar action = user.currentAction();\nif (action.isSkill() && (action.skillHpCost(action.item()) > 0)) {\nvar hpconv = action.skillHpCost(action.item());\nuser.gainHp(hpconv);\n}\n</Custom Action End Effect>\n","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":36,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":42,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Power Charge","note":"<Custom Action Start Effect>\n// Get the current action.\nvar action = user.currentAction();\n// Check if the action is physical, is a basic attack, and deals HP damage.\nif (action.isPhysical() && action.isHpEffect()) {\n  // Play an animation to indicate the effect is taking off.\n  user.startAnimation(2); \n}\n</Custom Action Start Effect>\n\n<Custom Confirm Effect>\n// Check if the action is physical, is a basic attack, and deals HP damage.\nif (this.isPhysical() && this.isHpEffect() && value > 0) {\n  // Increase the damage by a multiplier.\n  value *= 2.5;\n  // Round up the damage.\n  value = Math.ceil(value);\n  // Remove the state.\n  user.removeState(36);\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":37,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":44,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Mind Charge","note":"<Custom Action Start Effect>\n// Get the current action.\nvar action = user.currentAction();\n// Check if the action is magical and deals HP damage.\nif (action.isMagical() && action.isHpEffect()) {\n  // Start the animation.\n  user.startAnimation(2); \n}\n</Custom Action Start Effect>\n\n<Custom Confirm Effect>\n// Check if the action is magical and deals HP damage.\nif (this.isMagical() && this.isHpEffect()) {\n  // Increase the damage by a multiplier.\n  value *= 2.5;\n  // Round up the damage.\n  value = Math.ceil(value);\n  // Remove the state.\n  user.removeState(37);\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":38,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Avicebron Status","note":"<Custom React Effect>\n// Check if this dealt HP damage\nif (this.isHpEffect() && value > 0) {\n  // Get the target's alive allies\n  var group = target.friendsUnit().aliveMembers();\n  // Calculate the damage to be dispersed\n  var rate = 0.15;\n  // Reduce it by 15% per member other than the user\n  rate = Math.min(rate, 1 / Math.max(1, group.length - 1));\n  // Round the damage down\n  var dmg = Math.floor(value * rate);\n  // Loop through each member\n  for (var i = 0; i < group.length; ++i) {\n    // Get the currently looped member\n    var member = group[i];\n    // Check if the member exists and isn't the target\n    if (member && member !== target) {\n      // Lower the damage dealt to the target by the reduced amount\n      value -= dmg;\n      // Play an animation on the looped member\n      member.startAnimation(2);\n      // Make the member lose HP\n      member.gainHp(-dmg);\n      // Play a damage popup\n      member.startDamagePopup();\n      // Check if the member is dead\n      if (member.isDead()) {\n        // If it is, make the member collapse\n        member.performCollapse();\n      }\n      // Clear the member's results\n      member.clearResult();\n    }\n  }\n  // Make sure the damage amount reduced cannot go below 0\n  value = Math.max(value, 0);\n}\n</Custom React Effect>\n\n<Custom Regenerate Effect>\nvar group = origin.friendsUnit().aliveMembers();\nvar healval = (group.length - 1) * 10;\norigin.gainHp(healval);\n</Custom Regenerate Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":39,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":40,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Red Knight","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":41,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":247,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":1,"name":"Mind Out","note":"<confusion edit: true, false> ","overlay":6,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":3,"stepsToRemove":100},
{"id":42,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Mind Out(Passive)","note":"<Custom React Effect>\nif (this.isHpEffect() && value > 0) {\nvar dmg = 0;\nvar rate = 0;\nvar dmgrate = 0;\nvar group = target.opponentsUnit().aliveMembers();\nfor (var i = 0; i < group.length; ++i) {\nvar member = group[i];\nif (member && member.isStateAffected(41)) {\nrate += 1; \n}\n}\ndmgrate = (0.5 / rate);\ndmg = value * dmgrate;\ndmg = Math.ceil(dmg);\nfor (var i = 0; i < group.length; ++i) {\nvar member = group[i];\nif (member && member.isStateAffected(41)) {\nmember.gainHp(-dmg);\nvalue -= dmg;\nmember.callCustomPopup('Pain Split', 'Pop High, Wait, Wait, Wait, Stretch', 'this.standardFontFace()', 'this.standardFontSize()', '#BBFFFF')\nmember.startDamagePopup();\nif (member.isDead()) {\nmember.performCollapse();\n}\nmember.clearResult();\n}\n}\n}\n</Custom React Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":43,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":44,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":45,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":34,"dataId":0,"value":0.2}],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Rhythm","note":"<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isAttack() || this.isAttackSkill()) {\ntarget.addState(46);\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":46,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":50,"maxTurns":2,"message1":"","message2":"","message3":"","message4":"","minTurns":2,"motion":0,"name":"Rhythm Eff (Enemy)","note":"<Reapply Reset Turns>\n\n<Custom Apply Effect>\n//Removes Effect from all non-targets\nvar group = target.friendsUnit().aliveMembers();\nfor (var i = 0; i < group.length; ++i) {\nvar member = group[i];\nif (member && member !== target) {\nmember.removeState(46);\n}\n}\nif (user.rhythm === undefined) {\nuser.rhythm = 1;\n} else {\nuser.rhythm += 1;\n}\nuser.rhythm = user.rhythm.clamp(0,5)\nvar lostpower =  1 * (user.rhythm);\nuser.setAtkPlus(-lostpower);\norigin.setAtkPlus(lostpower);\n</Custom Apply Effect>\n\n\n<Custom Leave Effect>\nvar lostpower = 0;\nuser.rhythm = 0;\nuser.setAtkPlus(0);\norigin.setAtkPlus(0);\n</Custom Leave Effect>\n\n<Custom Remove Effect>\nvar lostpower = 0;\nuser.rhythm = 0;\nuser.setAtkPlus(0);\norigin.setAtkPlus(0);\n</Custom Remove Effect>\n\n","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":47,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":21,"dataId":2,"value":1.3},{"code":21,"dataId":4,"value":1.3},{"code":34,"dataId":0,"value":0.5},{"code":22,"dataId":2,"value":-10}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Brutality","note":"<Custom Select Effect>\n// Get the current skill\nvar skill = this.item();\n// Check if the skill exists and can deal critical damage\nif (skill && skill.damage.critical) {\n  // Get the previous Critical Hit settings\n  this._prevForcedCriticalHit = $gameSystem._forceCritical;\n  this._prevForcedNoCriticalHit = $gameSystem._forceNoCritical;\n  // Force the hit to be a critical hit\n  BattleManager.actionForceNoCritical();\n}\n</Custom Select Effect>\n\n<Custom Deselect Effect>\n// Check if the previous settings exist\nif (this._prevForcedCriticalHit !== undefined) {\n  // Revert the Critical Hit settings to what they were before\n  $gameSystem._forceCritical = this._prevForcedCriticalHit;\n  $gameSystem._forceNoCritical = this._prevForcedNoCriticalHit;\n}\n</Custom Deselect Effect>\n\n<Custom Confirm Effect>\n// Check if the action deals HP damage\nif (this.isHpEffect() && value > 0) {\n  // Get this action's elements\n  var elements = this.getItemElements();\n  // Loop through each of the elements\n  for (var i = 0; i < elements.length; ++i) {\n    // Get the currently looped element\n    var elementId = elements[i];\n    // Check if the target is weak to the element\n    if (target.elementRate(elementId) > 1.00) {\n      // Set the bonus damage rate to be dealt\n      var rate = 0.75;\n      // Calculate the new damage value\n      value = Math.ceil(value * rate);\n      // Break the loop\n      break;\n    }\n  }\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":48,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Accel","note":"<Custom Turn Start Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(49);\n}\n</Custom Turn Start Effect>\n\n<Custom Action End Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(49);\n}\n</Custom Action End Effect>\n\n<Custom Deselect Effect>\nif (origin.isStateAffected(17)||origin.isStateAffected(18)) {\norigin.addState(49);\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":49,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":6,"value":2},{"code":34,"dataId":0,"value":1}],"iconIndex":29,"maxTurns":3,"message1":"IS BOOSTED","message2":"","message3":"","message4":"is no longer boosted.","minTurns":3,"motion":0,"name":"Accel Eff","note":"<Reapply Reset Turns>\n\n<Custom Apply Effect>\nif (user.isDebuffAffected(0)) {\nuser.removeBuff(0);\n}\nif (user.isDebuffAffected(1)) {\nuser.removeBuff(1);\n}\nif (user.isDebuffAffected(2)) {\nuser.removeBuff(2);\n}\nif (user.isDebuffAffected(3)) {\nuser.removeBuff(3);\n}\nif (user.isDebuffAffected(4)) {\nuser.removeBuff(4);\n}\nif (user.isDebuffAffected(5)) {\nuser.removeBuff(5);\n}\nif (user.isDebuffAffected(6)) {\nuser.removeBuff(6);\n}\nif (user.isDebuffAffected(7)) {\nuser.removeBuff(7);\n}\n</Custom Apply Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":50,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":34,"dataId":0,"value":0.3}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"DPS Trait 1","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":51,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"DPS Trait 2","note":"<Custom Turn Start Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(52);\n}\n</Custom Turn Start Effect>\n\n<Custom Action End Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(52);\n}\n</Custom Action End Effect>\n\n<Custom Deselect Effect>\nif (origin.isStateAffected(17)||origin.isStateAffected(18)) {\norigin.addState(52);\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":52,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":34,"dataId":0,"value":0.3},{"code":23,"dataId":5,"value":1.3}],"iconIndex":29,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Momentum Stream","note":"<Reapply Reset Turns>\n","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":53,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"DPS Trait 3","note":"<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isHpEffect() && value > 0) {\nif (user.fervor === undefined) {\nuser.fervor = 0;\n}\nuser.fervor += 2;\nuser.fervor = user.fervor.clamp(0,10);\nvar pow = user.fervor *2;\nuser.setAtkPlus(pow);\nuser.setMatPlus(pow);\n}\n</Custom Confirm Effect>\n\n<Custom Respond Effect>\nif (this.isHpEffect() && target.result().hpDamage > 0) {\nif (user.fervor === undefined) {\nuser.fervor = 0;\n}\nuser.fervor -= 1;\nuser.fervor = user.fervor.clamp(0,10);\nvar pow = user.fervor *2;\nuser.setAtkPlus(pow);\nuser.setMatPlus(pow);\n}\n</Custom Respond Effect>\n\n<Custom Leave Effect>\nuser.fervor = 0;\nuser.setAtkPlus(0);\nuser.setMatPlus(0);\n</Custom Leave Effect>\n\n<Custom Remove Effect>\nuser.fervor = 0;\nuser.setAtkPlus(0);\nuser.setMatPlus(0);\n</Custom Remove Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":54,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"DPS Trait 4","note":"<Custom Confirm Effect>\nif (this.isPhysical()) {\nif (user.physpow === undefined) {\nuser.physpow = 0;\n}\nif (!this.isAttack()) {\nuser.physpow += 1;\nuser.physpow = user.physpow.clamp(0,6);\nvar pow = Math.max(0,(user.physpow-1));\nvalue *= 1 + (pow*0.05);\nvalue = Math.ceil(value);\n}\n} else {\nif (user.physpow === undefined) {\nuser.physpow = 0;\n}\nuser.physpow = 0;\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":55,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Elemrhythm","note":"<Custom Confirm Effect>\nif (this.isMagical() && this.isSkill()) {\nif (user.magpow === undefined) {\nuser.magpow = 0;\n}\nif (value > 0) {\nuser.magpow += 1;\nuser.magpow = user.magpow.clamp(0,11);\nvar pow = Math.max(0,(user.magpow-1));\nvalue *= 1 + (pow*0.05);\nvalue = Math.ceil(value);\n}\n} else {\nif (user.magpow === undefined) {\nuser.magpow = 0;\n}\nuser.magpow = 0;\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":56,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"DPS Trait 6","note":"<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isAttack() || this.isAttackSkill()) {\nuser.addState(57);\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":57,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":39,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"DPS Trait 6B","note":"<Reapply Reset Turns>\n\n<Custom Apply Effect>\nif (user.crit === undefined) {\nuser.crit = 0.05\n}\nuser.setCriPlus(user.crit);\n</Custom Apply Effect>\n\n<Custom Confirm Effect>\nif (this.isAttack() || this.isAttackSkill()) {\nuser.crit += 0.05;\n}\nuser.crit = user.crit.clamp(0,0.25);\nuser.setCriPlus(user.crit);\n</Custom Confirm Effect>\n\n<Custom Leave Effect>\nuser.crit = 0;\nuser.setCriPlus(user.crit);\n</Custom Leave Effect>\n\n<Custom Remove Effect>\nuser.crit = 0;\nuser.setCriPlus(user.crit);\n</Custom Remove Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":58,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"DPS Trait 7","note":"<Custom Confirm Effect>\nif (this.isSkill() && (user.skillMpCost(this.item()) > 0)) {\nvar hpconv = user.skillMpCost(this.item());\nhpconv = (hpconv*0.5);\nhpconv = Math.round(hpconv);\nhpconv = hpconv.clamp(0,50);\nuser.gainHp(hpconv);\nuser.startDamagePopup();\nuser.clearResult();\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":59,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"DPS Trait 8","note":"<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isHpEffect() && value > 0) {\nif (target.hp < (target.mhp *0.5)) {\nvalue *= 1.075;\nvalue = Math.ceil(value);\n}\nif (origin.hp < (origin.mhp *0.5)) {\nvalue *= 1.075;\nvalue = Math.ceil(value);\n}\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":60,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"DPS Trait 9","note":"<Custom Turn Start Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(61);\n}\n</Custom Turn Start Effect>\n\n<Custom Turn End Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(61);\n}\n</Custom Turn End Effect>\n\n<Custom Action End Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(61);\n}\n</Custom Action End Effect>\n\n<Custom Deselect Effect>\nif (origin.isStateAffected(17)||origin.isStateAffected(18)) {\norigin.addState(61);\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":61,"autoRemovalTiming":2,"chanceByDamage":100,"traits":[{"code":23,"dataId":4,"value":0}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"DPS Trait 9B","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":62,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Lethal Combo","note":"<Custom Initiate Effect>\n// Check if the action is a basic attack.\nif (this.isSkill() && !this.isAttack()) {\nuser.addState(63);\n}\n</Custom Initiate Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":63,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":13,"maxTurns":2,"message1":"","message2":"","message3":"","message4":"","minTurns":2,"motion":0,"name":"Lethal Combo Eff","note":"<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isAttack() || this.isAttackSkill()) {\ndmg = Math.max(1,origin.atk,origin.mat);\nvalue += Math.round(dmg);\n}\n</Custom Confirm Effect>\n\n<Custom Establish Effect>\n// Check if the action is a basic attack.\nif (this.isAttack() || this.isAttackSkill()) {\nuser.removeState(63);\n}\n</Custom Establish Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":64,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Precision Master","note":"<Critical Multiplier: +50%>\n<Custom Initiate Effect>\n// Check if the action is an attack.\nif (this.isHpEffect() ) {\ntarget.addState(65);\n}\n</Custom Initiate Effect>\n\n<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isHpEffect() && (!target.result().critical)) {\ntarget.removeState(65);\n}\n</Custom Confirm Effect>\n\n<Custom Conclude Effect>\ntarget.removeState(65);\n</Custom Conclude Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":65,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":3,"value":0.5}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Precision Master Eff","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":66,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Quadforce","note":"<Custom Establish Effect>\nif (this.isHpEffect() && value > 0 ) {\nif (user.arondight === undefined) {\nuser.arondight = 0;\n}\nuser.arondight += 1;\nif (user.arondight == 4) {\nvar foes = target.friendsUnit().aliveMembers();\nfor (var i = 0; i < foes.length; ++i) {\nvar foe = foes[i];\nif (foe) {\ndmg = Math.max(1,origin.atk*2,origin.mat*2);\nif (target.result().critical) {\ndmg  *= 2.0 + (user.criticalMultiplierBonus());\n}\ndmg = Math.round(dmg);\nfoe.gainHp(-dmg);\nfoe.startDamagePopup();\nif (foe.isDead()) {\nfoe.performCollapse();\n}\nfoe.startAnimation(159);\n}\n}\nuser.arondight = 0;\n}\n}\n</Custom Establish Effect>\n","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":67,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Burst Trait 1","note":"<Custom Turn Start Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(68);\n}\n</Custom Turn Start Effect>\n\n<Custom Turn End Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(68);\n}\n</Custom Turn End Effect>\n\n<Custom Action End Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(68);\n}\n</Custom Action End Effect>\n\n<Custom Deselect Effect>\nif (origin.isStateAffected(17)||origin.isStateAffected(18)) {\norigin.addState(68);\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":68,"autoRemovalTiming":2,"chanceByDamage":100,"traits":[{"code":21,"dataId":2,"value":1.5},{"code":21,"dataId":4,"value":1.5}],"iconIndex":42,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Burst Trait 1B","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":69,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Burst Trait 2","note":"\n<Custom Initiate Effect>\n// Check if the action is an attack.\nif (this.isHpEffect() && target.isStateAffected(15)) {\nif (origin.isStateAffected(17)||origin.isStateAffected(18)) {\ntarget.addState(70);\n}\n}\n</Custom Initiate Effect>\n\n\n<Custom Conclude Effect>\ntarget.removeState(70);\n</Custom Conclude Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":70,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":3,"value":0},{"code":21,"dataId":5,"value":0}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Burst Trait 2B","note":"<Hide Turns>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":71,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Genocider","note":"<Custom Confirm Effect>\nif (this.isSkill() && this.isForAll() && value > 0) {\nuser.bonus = 0;\nvar foes = target.friendsUnit().aliveMembers().length;\nuser.bonus += foes;\nvalue += value*0.25*foes;\nvalue = Math.round(value);\n}\n</Custom Confirm Effect>\n\n","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":72,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Burst Trait 4","note":"<Custom Confirm Effect>\nuser.raider = target.hp;\n</Custom Confirm Effect>\n\n<Custom Establish Effect>\nif (target.hp < (user.raider*0.7) && !origin.isStateAffected(73)) {\norigin.addState(73);\n}\n</Custom Establish Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":73,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":6,"value":1.5},{"code":34,"dataId":0,"value":1},{"code":61,"dataId":0,"value":1}],"iconIndex":38,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Burst Trait 4B","note":"<reAddBattler>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":74,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Burst Trait 5","note":"<Custom Confirm Effect>\nif (this.isHpEffect() && value > 0) {\nif (target.isStateAffected(35)) {\nvar maxforce = Math.max(user.atk*0.5,user.mat*0.5)\nvalue += Math.min(target.hp/10,maxforce);\n} else {\nvalue += (target.hp/10);\n}\nvalue = Math.round(value);\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":75,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Burst Trait 6","note":"<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isHpEffect() && !target.isStateAffected(76) && value > 0) {\nif (target.hp < (target.mhp *0.5)) {\nvalue *= 1.5;\ntarget.addState(78);\n}\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":76,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Burst Trait 6B","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":77,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Burst Trait 7","note":"\n<Custom Confirm Effect>\nif (this.isHpEffect() && value > 0) {\nif (target.isStateAffected(21)||target.isStateAffected(22)||target.isStateAffected(28)||target.isStateAffected(30)||target.isStateAffected(31)) {\nvalue *= 1.25;\n}\n}\n</Custom Confirm Effect>\n","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":78,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Moody","note":"<Custom Regenerate Effect>\n// This is the number of turns the buffs and debuffs will last\nvar turns = 5;\n// Create a pool for the parameters that can be changed\nvar allowedParams = [];\n// Insert Param ID's you want to randomly add here:\nallowedParams.push(2, 3, 4, 5, 6, 7);\n// Make a copy of the pool\nvar result = allowedParams.slice();\n// Initialize the parameter ID\nvar paramId;\n// Loop through each of the copied pool's parameters\nwhile (result.length > 0) {\n  // Get a randomly looped parameter\n  paramId = result[Math.floor(Math.random() * result.length)];\n  // Remove it from the copied pool\n  result.splice(result.indexOf(paramId), 1);\n  // Check if the user isn't at max buffs for that stat\n  if (!user.isMaxBuffAffected(paramId)) {\n    // Buff the user twice for that stat\n    user.addBuff(paramId, turns);\n    user.addBuff(paramId, turns);\n    // Break the loop\n    break;\n  }\n}\n// Make a copy of the pool again\nvar result = allowedParams.slice();\n// Check if the previously initialized parameter has a value\nif (paramId !== undefined) {\n  // Get the index of the parameter\n  var index = result.indexOf(paramId);\n  // If it is 0 or greater\n  if (index > -1) {\n    // Then remove it from the pool\n    result.splice(index, 1);\n  }\n}\n// Loop through the copied pool once more\nwhile (result.length > 0) {\n  // Get a randomly looped parameter\n  paramId = result[Math.floor(Math.random() * result.length)];\n  // Remove the looped parameter from the pool\n  result = result.splice(result.indexOf(paramId), 1);\n  // Check if the user isn't at max debuffs for that parameter\n  if (!user.isMaxDebuffAffected(paramId)) {\n    // Then add a debuff to that parameter\n    user.addDebuff(paramId, turns);\n    // Break the loop\n    break;\n  }\n}\n</Custom Regenerate Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":79,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Double-Edged Sword","note":"<Custom Confirm Effect>\nif (this.isHpEffect() && value > 0) {\nvalue *= 1.15;\nvalue = Math.round(value);\n}\n</Custom Confirm Effect>\n\n<Custom React Effect>\nif (this.isHpEffect() && value > 0) {\nvalue *= 1.1;\nvalue = Math.round(value);\n}\n</Custom React Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":80,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Sustain","note":"HP Life Steal Physical: +15%>\nHP Life Steal Magical: +15%>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":81,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Warlord","note":"<Custom React Effect>\n// Check if the action dealt physical damage.\nif (this.isHpEffect() && value > 0) {\n  // Default the target's staggered damage to 0.\n  target._staggerDmg = target._staggerDmg || 0;\n  // Calculate the amount of damage to reduce.\n  var reduce = Math.ceil(value * 0.35);\n  // Reduce that amount of damage from the actual damage.\n  value -= reduce;\n  // Add the Staggered Damage state.\n  target.addState(82);\n  // Increase the target's staggered damage amount by the amount reduced.\n  target._staggerDmg += reduce;\n}\n</Custom React Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":82,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":48,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Warlord Eff","note":"<Custom Regenerate Effect>\n// Default the user's staggered damage to 0.\nuser._staggerDmg = user._staggerDmg || 0;\n// Check if the user is alive and has staggered damage left.\nif (user.isAlive() && user._staggerDmg > 0) {\n  // Calculate the number of turns remaining for staggered damage.\n  var turns = Math.max(1, user.stateTurns(stateId));\n  // Calculate the amount of damage to deal this turn.\n  var dmg = Math.ceil(user._staggerDmg / turns);\n  // Reduce the user's staggered damage by that amount.\n  user._staggerDmg -= dmg;\n  // Reduce the user's HP by that amount.\n  user.gainHp(-dmg);\n  // Show an animation.\n  user.startAnimation(194);\n  // Display the damage popup.\n  user.startDamagePopup();\n  // Clear the user's results.\n  user.clearResult();\n  // Check if the user is dead.\n  if (user.isDead()) {\n    // If so, then collapse the user.\n    user.performCollapse();\n  }\n}\n</Custom Regenerate Effect>\n\n<Custom Remove Effect>\n// Reset the staggered damage to 0.\nuser._staggerDmg = 0;\n</Custom Remove Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":83,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Battle Guardian","note":"<Custom Turn Start Effect>\nvar foes = user.opponentsUnit().aliveMembers();\nvar padbonus = (2 * foes.length);\nuser.setDefPlus(padbonus);\nuser.setMdfPlus(padbonus);\n</Custom Turn Start Effect>\n\n<Custom Action Start Effect>\nvar foes = user.opponentsUnit().aliveMembers();\nvar padbonus = (2 * foes.length);\nuser.setDefPlus(padbonus);\nuser.setMdfPlus(padbonus);\n</Custom Action Start Effect>\n\n<Custom Action End Effect>\nvar foes = user.opponentsUnit().aliveMembers();\nvar padbonus = (2 * foes.length);\nuser.setDefPlus(padbonus);\nuser.setMdfPlus(padbonus);\n</Custom Action End Effect>\n\n<Custom Turn End Effect>\nvar foes = user.opponentsUnit().aliveMembers();\nvar padbonus = (2 * foes.length);\nuser.setDefPlus(padbonus);\nuser.setMdfPlus(padbonus);\n</Custom Turn End Effect>\n\n<Custom Leave Effect>\nuser.setDefPlus(0);\nuser.setMdfPlus(0);\n</Custom Leave Effect>\n\n\n<Custom Remove Effect>\nuser.setDefPlus(0);\nuser.setMdfPlus(0);\n</Custom Remove Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":84,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 1","note":"<Custom Turn Start Effect>\nif (user.isStateAffected(15)||user.isStateAffected(16)) {\nuser.addState(85);\n}\n</Custom Turn Start Effect>\n\n<Custom Action End Effect>\nif (user.isStateAffected(15)||user.isStateAffected(16)) {\nuser.addState(85);\n}\n</Custom Action End Effect>\n\n<Custom Deselect Effect>\nif (origin.isStateAffected(15)||origin.isStateAffected(16)) {\norigin.addState(85);\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":85,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":35,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Durability Trait 1B","note":"<Reapply Reset Turns>\n\n<def Flat: +5>\n<mdf Flat: +5>\n","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":86,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 2","note":"<Custom Action End Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nvar hpgain = Math.ceil((origin.mhp - origin.hp)/10);\nvar mpgain = Math.ceil((origin.mmp - origin.mp)/10);\nuser.gainHp(hpgain);\nuser.gainMp(mpgain);\n}\n</Custom Action End Effect>\n\n<Custom Deselect Effect>\nif (origin.isStateAffected(17)||origin.isStateAffected(18)) {\nvar hpgain = Math.ceil((origin.mhp - origin.hp)/10);\nvar mpgain = Math.ceil((origin.mmp - origin.mp)/10);\nuser.gainHp(hpgain);\nuser.gainMp(mpgain);\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":87,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 3","note":"<Custom Turn Start Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(88);\n}\n</Custom Turn Start Effect>\n\n<Custom Action End Effect>\nif (user.isStateAffected(17)||user.isStateAffected(18)) {\nuser.addState(88);\n}\n</Custom Action End Effect>\n\n<Custom Deselect Effect>\nif (origin.isStateAffected(17)||origin.isStateAffected(18)) {\norigin.addState(88);\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":88,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":43,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Durability Trait 3B","note":"<Reapply Reset Turns>\n\n<def Flat: +10>\n<mdf Flat: +10>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":89,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 4","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":90,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":32,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 4B","note":"<Custom Confirm Effect>\nif (this.isHpEffect() && value > 0) {\nvar hpgain = Math.round(value*0.3);\norigin.gainHp(hpgain);\nuser.gainHp(hpgain);\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":91,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":21,"dataId":3,"value":1.15},{"code":21,"dataId":5,"value":1.15}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 5","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":92,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":21,"dataId":0,"value":1.1}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 6","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":93,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 7","note":"<Custom Regenerate Effect>\nif (origin.hp < (origin.mhp *0.5)) {\nvar hpgain = Math.ceil(origin.mhp*0.015);\norigin.gainHp(hpgain);\n}\n</Custom Regenerate Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":94,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":23,"dataId":2,"value":1.2}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 8","note":"<Custom React Effect>\nif (this.isHpEffect() && value < 0) {\nvar mpgain = Math.round(value*0.5);\ntarget.gainMp(-mpgain);\n}\n</Custom React Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":95,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Durability Trait 9","note":"<Custom Barrier Points x Turns>\nvalue += Math.round(user.mhp*0.3);\n</Custom Barrier Points x Turns>\n\n<Custom Confirm Effect>\n// Registers the HP value of the user.\nuser._confirmHp = user.hp;\n</Custom Confirm Effect>\n\n<Custom Establish Effect>\n// Check to see if the effect deals damage to HP and is a physical attack.\nif (value > 0 && this.isHpEffect()) {\n  // Check to see if the user is at full HP.\n  if (user.hp === user.mhp) {\n    // Get the user's Life Steal results.\n    var result = user.result();\n    // Get the overheal amount.\n    var overheal = -1 * result.hpDamage + user._confirmHp - user.mhp;\n    // Check if the overheal amount is above 0.\n    if (overheal > 0) {\n      // Adds a barrier to the user based on the overheal amount.\n      user.gainBarrier(overheal, 2);\n    }\n  }\n}\n</Custom Establish Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":96,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":97,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":98,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":99,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":100,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Giant Slayer","note":"<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isPhysical() && value > 0 ) {\nvar difference = b.hp - a.hp;\nif (difference > 0) {\ndifference = Math.floor(difference / 50)\nvar rate = 1.00 + (0.005 * difference);\nrate = Math.min(1.25, rate);\nvalue *= rate;\nvalue = Math.round(value)\n}\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":101,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Ruyi","note":"<Custom Initiate Effect>\n// Check if the action is a skill.\nif (this.isSkill() && !this.isAttack()) {\nuser.addState(102);\n}\n</Custom Initiate Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":102,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":13,"maxTurns":2,"message1":"","message2":"","message3":"","message4":"","minTurns":2,"motion":0,"name":"Ruyi Effect","note":"<Custom Confirm Effect>\n// Check if the action is a basic attack.\nif (this.isAttack() || this.isAttackSkill()) {\ndmg = (user.paramBase(3)*0.5) + (user.mat*0.4);\nvalue += Math.round(dmg);\n}\n</Custom Confirm Effect>\n\n<Custom Establish Effect>\n// Check if the action is a basic attack.\nif (this.isAttack() || this.isAttackSkill()) {\nuser.removeState(102);\n}\n</Custom Establish Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":103,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":104,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":105,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":50,"maxTurns":5,"message1":"","message2":"","message3":"","message4":"","minTurns":5,"motion":0,"name":"Subjugate (Enemy)","note":"<Reapply Reset Turns>\n\n<Custom Regenerate Effect>\n// Default the subjugate damage to 0.\nuser._subjugateDmg = user._subjugateDmg || 0;\n// Check if the user is alive and the subjugate damage is above 0.\nif (user.isAlive() && user._subjugateDmg > 0) {\n  // Get the current turn count for this state.\n  var turns = Math.max(1, user.stateTurns(stateId));\n  // Calculate the damage to be dealt.\n  var dmg = Math.ceil(user._subjugateDmg / turns);\n  // Reduce the stored subjugate damage.\n  user._subjugateDmg -= dmg;\n  // Make the user take the damage.\n  user.gainHp(-dmg);\n  // Play an animation\n  user.startAnimation(7);\n  // Show the damage popup\n  user.startDamagePopup();\n  // Check if the user is dead\n  if (user.isDead()) {\n    // Then collapse the user\n    user.performCollapse();\n  }\n  // Clear the user's results\n  user.clearResult();\n  // Check if the origin isn't the user and the origin is alive\n  if (origin !== user && origin.isAlive()) {\n    // Make the origin gain the HP from subjugate\n    origin.gainHp(dmg);\n    // Start an animation on the origin\n    origin.startAnimation(46);\n    // Show a damage popup\n    origin.startDamagePopup();\n    // Clear the results\n    origin.clearResult();\n  }\n}\nvar lostdef =  Math.ceil(user.def*0.1);\nvar lostmdf =  Math.ceil(user.mdf*0.1);\nuser.addDef(-lostdef);\nuser.addMdf(-lostmdf);\norigin.addDef(lostdef);\norigin.addMdf(lostmdf);\n</Custom Regenerate Effect>\n\n<Custom Apply Effect>\n//Removes Effect from all non-targets\nvar group = target.friendsUnit().aliveMembers();\nfor (var i = 0; i < group.length; ++i) {\nvar member = group[i];\nif (member && member !== target) {\nmember.removeState(105);\n}\n}\nvar lostdef =  Math.ceil(target.def*0.1);\nvar lostmdf =  Math.ceil(target.mdf*0.1);\ntarget.addDef(-lostdef);\ntarget.addMdf(-lostmdf);\norigin.addDef(lostdef);\norigin.addMdf(lostmdf);\n</Custom Apply Effect>\n\n\n<Custom Leave Effect>\nuser.subjugate = 0;\nuser.setDefPlus(0);\nuser.setMdfPlus(0);\norigin.setDefPlus(0);\norigin.setMdfPlus(0);\n</Custom Leave Effect>\n\n<Custom Remove Effect>\nuser.subjugate = 0;\nuser.setDefPlus(0);\nuser.setMdfPlus(0);\norigin.setDefPlus(0);\norigin.setMdfPlus(0);\n</Custom Remove Effect>\n\n","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":106,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Beast Boost","note":"<Custom Establish Effect>\n// Check if Beast Boost hasn't been applied yet and if the target is dead or the target's HP is 0\nif (!this._beastBoostApplied && (target.isDead() || target.hp <= 0)) {\n  // Enable the Beast Boost flag\n  this._beastBoostApplied = true;\n  // Get the parameter ID to be boosted to be ATK\n  var boostParam = 2;\n  // Loop through ATK, DEF, MAT, MDF, AGI, and LUK parameters\n  for (var i = 3; i < 8; ++i) {\n    // Check if the looped parameter is the highest\n    if (user.param(i) > user.param(boostParam)) {\n      // Set the boosted parameter to the currently looped parameter\n      boostParam = i;\n    }\n  }\n  // Set the number of turns for the buff\n  var turns = 5;\n  // Buff the attacker\n  user.addBuff(boostParam, turns);\n  // Play an animation on the attacker\n  user.startAnimation(51);\n}\n</Custom Establish Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":107,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":44,"dataId":1,"value":1},{"code":44,"dataId":2,"value":1}],"iconIndex":74,"maxTurns":5,"message1":"","message2":"","message3":"","message4":"","minTurns":5,"motion":0,"name":"Arachne Hostage","note":"<Custom Apply Effect>\n// Sets the counter on the state to 5.\nuser.setStateCounter(stateId, 5);\n// Determine the damage of the roots being cut.\nuser._thornBindDmg = origin.mat * 2;\n// Determine the maximum cap of the damage.\nuser._thornBindDmg = Math.min(user._thornBindDmg, 500);\n</Custom Apply Effect>\n\n<Custom Deselect Effect>\n// Get the result of the target.\nvar result = target.result();\n// Check if the target is hit, alive, the action is physical, and dealing damage.\nif (result.isHit() && !target.isDead() && this.isPhysical() && this.isDamage()) {\n  // Play animation on target.\n  target.startAnimation(12);\n  // Get the amount of damage dealt.\n  var dmg = target._thornBindDmg || 1;\n  // Make the target lose HP.\n  target.gainHp(-dmg);\n  // Disable critical hit effects.\n  target.result().critical = false;\n  // Start the damage popup.\n  target.startDamagePopup();\n  // Clear the result.\n  target.clearResult();\n  // Change the counter on the state to drop by 1.\n  target.addStateCounter(stateId, -1);\n  // Check if the counter has reached 0.\n  if (target.getStateCounter(stateId) <= 0) {\n    // Remove the state.\n    target.removeState(stateId);\n  }\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":108,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":91,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Heal Jammer","note":"<Custom Apply Effect>\n// Set the Heal Jammer amount.\ntarget._antiHealBarrier = 1000;\n// Set the state counter to display the amount.\ntarget.setStateCounter(stateId, 1000);\n</Custom Apply Effect>\n\n<Custom Remove Effect>\n// Clear the Heal Jammer amount.\ntarget._antiHealBarrier = undefined;\n// Clear the state counter amount.\ntarget.setStateCounter(stateId, 0);\n</Custom Remove Effect>\n\n<Custom React Effect>\n// Check if the action heals HP.\nif (this.isHpEffect() && value < 0) {\n  // Default the target's Heal Jammer value to 0.\n  target._antiHealBarrier = target._antiHealBarrier || 0;\n  // Make the offset capped by the Heal Jammer.\n  var offset = Math.min(target._antiHealBarrier, Math.abs(value));\n  // Alter the healing amount.\n  value += offset;\n  // Reduce the Heal Jammer amount.\n  target._antiHealBarrier -= offset;\n  // Update the new Heal Jammer counter.\n  target.setStateCounter(stateId, target._antiHealBarrier);\n  // If the Heal Jammer amount is 0 or less...\n  if (target._antiHealBarrier <= 0) {\n    // Then remove the state.\n    target.removeState(stateId);\n  }\n  // Play an animation on the target.\n  target.startAnimation(5);\n  // Display a message stating the Heal Jammer blocked a certain amount of healing.\n  var text = '<CENTER>\\\\c[4]\\\\i[' + $dataStates[stateId].iconIndex + ']' + $dataStates[stateId].name + '\\\\c[0] blocked \\\\c[4]\\\\i[' + this.item().iconIndex + ']' + this.item().name + '\\\\c[0] from healing \\\\c[6]' + target.name() + '\\\\c[0]!';\n  // Set the wait time.\n  var wait = 90;\n  // Add the text to the BattleManager.\n  BattleManager.addText(text, wait);\n}\n</Custom React Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":109,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":28,"maxTurns":2,"message1":"","message2":"","message3":"","message4":"","minTurns":2,"motion":0,"name":"Spell Shield","note":"<Custom Select Effect>\n// Check if this action is a skill and targets an opponent.\nif (this.item() && DataManager.isSkill(this.item()) && this.isForOpponent() && !this.isAttack()) {\n  // Create a pool of blocked Skill TYPES.\n  var blockedtypes = [];\n  // Add the skill type ID's to that pool.\n  blockedtypes.push(1);\n  // Create a pool of blocked individual skills.\n  var blockedskills = [];\n  // Add the individual skill ID's to that pool.\n  blockedskills.push(132);\n  // Check if the skill type or skill ID matches.\n  if (blockedtypes.contains(this.item().stypeId) || blockedskills.contains(this.item().id)) {\n    // If it does, then store the skill's original success rate.\n    this._formerItemSuccessRate = this.item().successRate;\n    // Now drop the skill's success rate to 0.\n    this.item().successRate = 0;\n    // Start an animation to show the spell shield occurred.\n    target.startAnimation(53);\n  }\n}\n</Custom Select Effect>\n\n<Custom Deselect Effect>\n// Check if there is a success rate stored.\nif (this._formerItemSuccessRate !== undefined) {\n  // Restore the skill's success rate.\n  this.item().successRate = this._formerItemSuccessRate;\n  // Remove this spell shield state.\n  target.removeState(109);\n}\n</Custom Deselect Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":110,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":26,"maxTurns":4,"message1":"","message2":"","message3":"","message4":"","minTurns":4,"motion":0,"name":"Mind Crush","note":"<Category: Bypass Death Removal>\n\n<Custom Apply Effect>\n// Calculate the damage to be dealt by the formula.\ntarget._mindcrush = Math.ceil(origin.mat * 5);\n</Custom Apply Effect>\n\n<Custom Remove Effect>\n// Remove the damage effect.\ntarget._mindcrush = undefined;\n</Custom Remove Effect>\n\n<Custom Regenerate Effect>\n// Default the DoT formula.\ntarget._mindcrush = target._mindcrush || Math.ceil(origin.mat * 0.50);\n// Play an animation on the target.\ntarget.startAnimation(58);\n// Reduce the target's HP\ntarget.gainHp(-target._mindcrush);\n// Start the damage popup.\ntarget.startDamagePopup();\n// Check if the target is dead.\nif (target.isDead()) {\n  // Make the target collapse.\n  target.performCollapse();\n}\n// Clear the target's results.\ntarget.clearResult();\n</Custom Regenerate Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":111,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":21,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Provoked","note":"<Ignore Physical Taunt>\n<Ignore Magical Taunt>\n<Ignore Certain Taunt>\n\n<Custom Action Start Effect>\n// Get current action.\nvar action = user.currentAction();\n// Check if action exists, for an opponent, and that the provoker isn't on the same team\nif (action && action.isForOpponent() && origin.isActor() !== user.isActor()) {\n  action.setTarget(origin.index());\n}\n</Custom Action Start Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":112,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[],"iconIndex":81,"maxTurns":5,"message1":"","message2":"","message3":"","message4":"","minTurns":5,"motion":0,"name":"Thorns","note":"<Custom React Effect>\n// Check to see if any physical damage is dealt.\nif (value > 0 && this.isPhysical()) {\n  // Sets the Recoil Rate to 15%.\n  var rate = 0.25;\n  // Determines the amount of recoil damage dealt.\n  var recoil = value * rate;\n  // Sets the DEF bonus rate to 25%.\n  var rate = 0.25;\n  // Determines the amount of bonus damage dealt.\n  var bonus = target.def * rate;\n  // Rounds up the bonus damage and recoil damage.\n  var dmg = Math.ceil(bonus + recoil);\n  // Makes the attacker lose damage equal to the dmg variable.\n  user.gainHp(-dmg);\n  // Check to see if the attacker is dead.\n  if (user.isDead()) {\n    // If the attacker is dead, make it collapse.\n    user.performCollapse();\n  }\n}\n</Custom React Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":113,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":21,"dataId":2,"value":2},{"code":21,"dataId":4,"value":2},{"code":21,"dataId":6,"value":2},{"code":34,"dataId":0,"value":1},{"code":23,"dataId":4,"value":0},{"code":23,"dataId":5,"value":0},{"code":23,"dataId":1,"value":2},{"code":22,"dataId":7,"value":0.05},{"code":22,"dataId":8,"value":0.05}],"iconIndex":13,"maxTurns":5,"message1":"","message2":"","message3":"","message4":"","minTurns":5,"motion":0,"name":"Legendary Hyper Tension","note":"<Custom Apply Effect>\n// Check if user is an actor.\nif (user.isActor()) {\n  // Archive the previous settings.\n  user._prevCharName = user._prevCharName || user._characterName;\n  user._prevCharIndex = user._prevCharIndex || user._characterIndex;\n  user._prevFaceName = user._prevFaceName || user._faceName;\n  user._prevFaceIndex = user._prevFaceIndex || user._faceIndex;\n  user._prevBattlerName = user._prevBattlerName || user._battlerName;\n  // Check if the actor ID is 1.\n  if (user.actorId() === 1) {\n    // The filename of the character graphic without the file extension.\n    var charName = 'HaroldSSJ';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'HaroldSSJ';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'Harold_SSJ1';\n  // Check if the actor ID is 2.\n  } else if (user.actorId() === 2) {\n    // The filename of the character graphic without the file extension.\n    var charName = 'ThereseSSJ';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'ThereseSSJ';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'Therese_SSJ1';\n  // Check if the actor ID is 3.\n  } else if (user.actorId() === 3) {\n    // The filename of the character graphic without the file extension.\n    var charName = 'MarshaSSJ';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'MarshaSSJ';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'Marsha_SSJ1';\n  // Check if the actor ID is 4.\n  } else if (user.actorId() === 4) {\n    // The filename of the character graphic without the file extension.\n    var charName = 'LuciusSSJ';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'LuciusSSJ';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'Lucius_SSJ1';\n  // If none of the above actor ID's match, use this setting.\n  } else {\n    // The filename of the character graphic without the file extension.\n    var charName = 'SeveraLHT';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'SeveraLHT';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'SeveraLHT';\n  }\n  // Changes the character image to the setting applied from above.\n  user.setCharacterImage(charName, charIndex);\n  // Changes the face image to the setting applied from above.\n  user.setFaceImage(faceName, faceIndex);\n  // Changes the battler image from the setting applied from above.\n  user.setBattlerImage(battlerName);\n  // Refreshes the user's appearance.\n  user.refresh();\n}\n</Custom Apply Effect>\n\n<Custom Remove Effect>\n// Retrieve archived settings.\nvar charName = user._prevCharName;\nvar charIndex = user._prevCharIndex;\nvar faceName = user._prevFaceName;\nvar faceIndex = user._prevFaceIndex;\nvar battlerName = user._prevBattlerName;\n// Changes the character image to the archived setting.\nuser.setCharacterImage(charName, charIndex);\n// Changes the face image to the archived setting.\nuser.setFaceImage(faceName, faceIndex);\n// Changes the battler image from the archived setting.\nuser.setBattlerImage(battlerName);\n// Clear archived data.\nuser._priorityCharacterName = undefined;\nuser._priorityCharacterIndex = undefined;\nuser._prevFaceName = undefined;\nuser._prevFaceIndex = undefined;\nuser._priorityFaceName = undefined;\nuser._priorityFaceIndex = undefined;\nuser._prevFaceName = undefined;\nuser._prevFaceIndex = undefined;\nuser._priorityBattlerName = undefined;\nuser._prevBattlerName = undefined;\n// Refreshes the user's appearance.\nuser.refresh();\n</Custom Remove Effect>\n\n\n<Custom React Effect>\nif (value < (target.mhp*0.25)) {\nvalue = 0;\n}\n</Custom React Effect>\n","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":114,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Absolute Reasoning","note":"<Custom Confirm Effect>\n// Check if the action deals HP damage\nif (this.isHpEffect() && value > 0) {\n  // Get this action's elements\n  var elements = this.getItemElements();\n  // Loop through each of the elements\n  for (var i = 0; i < elements.length; ++i) {\n    // Get the currently looped element\n    var elementId = elements[i];\n    // Check if the target is weak to the element\n    if (target.elementRate(elementId) > 1.00 || target.result().critical) {\n      // Set the bonus damage rate to be dealt\n      var rate = 1.30;\n      // Calculate the new damage value\n      target.stateAdd(115);\n      // Break the loop\n      break;\n    }\n  }\n}\n</Custom Confirm Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":115,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":23,"dataId":6,"value":1.15},{"code":23,"dataId":7,"value":1.15}],"iconIndex":168,"maxTurns":3,"message1":"","message2":"","message3":"","message4":"","minTurns":3,"motion":0,"name":"Absolute Reasoning Effect","note":"","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":116,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Oblivious Idiot","note":"<Custom Regenerate Effect>\n// Make a loop that goes through the 8 parameters.\nfor (var i = 0; i < 8; ++i) {\n  // Set the target's buffs/debuffs to equal 0 if they don't exist.\n  target._buffs[i] = target._buffs[i] || 0;\n  // Check if the target is either buffed or debuffed.\n  if (target.isDebuffAffected(i)) {\n    // Flip it around!\n    target._buffs[i] *= -1;\nvar healamt = Math.ceil(target.mhp/10);\n    target.gainHp(healamt);\n  }\n}","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":117,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Deal With The Devil","note":"<Custom Establish Effect>\n// Create empty pools for skills and skipp types.\nvar skills = [];\nvar skillTypes = [];\n// Insert the skills this passive can be used with.\nskills.push(148);\n// Insert the skill types this passive can be used with.\nskillTypes.push(1);\n// Check if the action is a skill, the skill pool contain the skill or if the skill type pool contains the skill's type\nif (!this.isAttack() && this.isSkill() && (skills.contains(this.item().id)) || skillTypes.contains(this.item().stypeId)) {\n  // Check if the target exists and has suffered HP damage\n  if (target && target.result() && target.result().hpDamage > 0) {\n    // Make a copy of the target's original action results\n    var originalResult = JsonEx.makeDeepCopy(target._result);\n    // Clear those results\n    target.clearResult();\n    // Calculate the extra damage\n    var extraDmg = Math.ceil(0.40 * originalResult.hpDamage);\n    // Calculate the success rate to deal extra damage\n    var successRate = 0.20;\n    // Make the number of times struck\n    var struck = 0;\n    // Set the maximum number of times the action can be struck\n    var maxHits = 5;\n    // Make a loop\n    for (;;) {\n      // Check if the target is alive and the action has passed the success rate\n      if (target.isAlive() && Math.random() < successRate) {\n        // Increase the number of times struck by 1\n        struck += 1;\n        // Make the target receive damage\n        target.gainHp(-extraDmg);\n        // Show the damage popup\n        target.startDamagePopup();\n        // Check if the target is dead\n        if (target.isDead()) {\n          // Make the target collapse\n          target.performCollapse();\n        }\n        // Clear the target's results\n        target.clearResult();\n        // Check if the number of times struck has hit the maximum\n        if (struck >= maxHits) {\n          // If it did, break the loop\n          break;\n        }\n      // If the extra damage success rate fails\n      } else {\n        // Then break the loop\n        break;\n      }\n    }\n    // If the number of times struck is greater than 0\n    if (struck > 0) {\n      // Then play an animation on the target\n      target.startAnimation(5);\n    }\n    // Revert the target's results back to its original results\n    target._result = originalResult;\n  }\n}\n</Custom Establish Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":118,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Omnipotent","note":"<Custom Battle Effect>\n// Get the state ID for the bubble wrap effect state\nvar bubbleWrapId = 119;\n// Add that state to the user\nuser.addState(bubbleWrapId);\n// Set the cooldown to 0\nuser._bubbleWrapCooldown = 0;\n</Custom Battle Effect>\n\n<Custom Regenerate Effect>\n// Default the bubble wrap cooldown to 0\nuser._bubbleWrapCooldown = user._bubbleWrapCooldown || 0;\n// Check if the cooldown is above 0\nif (user._bubbleWrapCooldown > 0) {\n  // Decrease the cooldown by 1\n  user._bubbleWrapCooldown -= 1;\n  // Check if the cooldown has reached 0 or less\n  if (user._bubbleWrapCooldown <= 0) {\n    // Get the state ID for the bubble wrap effect state\n    var bubbleWrapId = 119;\n    // Play an animation on the user\n    user.startAnimation(84);\n    // Add the state to the user\n    user.addState(bubbleWrapId);\n  }\n}\n</Custom Regenerate Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":119,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":11,"dataId":10,"value":2}],"iconIndex":16,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Omnipotent Shield","note":" <Custom React Effect>\n// Check if HP damage is dealt\nif (this.isHpEffect() && value > 0) {\n  // Get the elements used for the effect\n  var elements = this.getItemElements();\n  // Get the element ID for the lightning element\n  var lightningElementId = 10;\n  // Check if the lightning element isn't involved\n  if (!elements.contains(lightningElementId)) {\n    // If isn't involved, set the damage to 0\n    value = 0;\n  }\n  // Play an animation on the target\n  target.startAnimation(4);\n  // Remove the bubble wrap state from the target\n  target.removeState(119);\n}\n</Custom React Effect>\n\n<Custom Remove Effect>\n// Set the bubble wrap cooldown to 3 turns\nuser._bubbleWrapCooldown = 3;\n</Custom Remove Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":120,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Insanity","note":"<Custom Passive Condition>\n// Check if the party is in battle.\nif ($gameParty.inBattle()) {\n  // Default the user's trance state to false.\n  user._trance = user._trance || false;\n  // Sets the condition for the user to be either in the trance state or if the user's TP matches the user's MaxTP.\n  condition = user._trance || user.tp === user.maxTp();\n} else {\n  // Otherwise, the condition is false.\n  condition = false;\n}\n// If the condition passes...\nif (condition) {\n  // And if the user isn't in the trance state...\n  if (!user._trance) {\n    // Then play an animation as the user enters trance.\n    user.startAnimation(120);\n    user.addState(121);\n  }\n  // Set the user's trance state to true.\n  user._trance = true;\n}\n</Custom Passive Condition>\n\n<Custom Regenerate Effect>\n// Set the TP drain amount.\nvar tp = 20;\n// Reduce the user's TP.\nuser.gainTp(-tp);\n// If the user's TP is 0...\nif (user.tp === 0) {\n  // ...then turn off trance.\n  user._trance = false;\n  user.removeState(121);\n}\n<Custom Regenerate Effect>","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":121,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":21,"dataId":4,"value":2},{"code":23,"dataId":4,"value":0},{"code":21,"dataId":6,"value":1.5},{"code":22,"dataId":7,"value":-0.03},{"code":23,"dataId":5,"value":0}],"iconIndex":71,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Insanity Eff","note":"<Swap Gauge 2: TP>\n\n<Custom Apply Effect>\n// Check if user is an actor.\nif (user.isActor()) {\n  // Archive the previous settings.\n  user._prevCharName = user._prevCharName || user._characterName;\n  user._prevCharIndex = user._prevCharIndex || user._characterIndex;\n  user._prevFaceName = user._prevFaceName || user._faceName;\n  user._prevFaceIndex = user._prevFaceIndex || user._faceIndex;\n  user._prevBattlerName = user._prevBattlerName || user._battlerName;\n  // Check if the actor ID is 1.\n  if (user.actorId() === 1) {\n    // The filename of the character graphic without the file extension.\n    var charName = 'HaroldSSJ';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'HaroldSSJ';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'Harold_SSJ1';\n  // Check if the actor ID is 2.\n  } else if (user.actorId() === 2) {\n    // The filename of the character graphic without the file extension.\n    var charName = 'ThereseSSJ';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'ThereseSSJ';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'Therese_SSJ1';\n  // Check if the actor ID is 3.\n  } else if (user.actorId() === 3) {\n    // The filename of the character graphic without the file extension.\n    var charName = 'MarshaSSJ';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'MarshaSSJ';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'Marsha_SSJ1';\n  // Check if the actor ID is 4.\n  } else if (user.actorId() === 4) {\n    // The filename of the character graphic without the file extension.\n    var charName = 'LuciusSSJ';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'LuciusSSJ';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'Lucius_SSJ1';\n  // If none of the above actor ID's match, use this setting.\n  } else {\n    // The filename of the character graphic without the file extension.\n    var charName = 'BaelSAN';\n    // The index of the character graphic used.\n    var charIndex = 0;\n    // The filename of the face graphic without the file extension.\n    var faceName = 'BaelSAN';\n    // The index of of the face graphic used.\n    var faceIndex = 0;\n    // The filename of the battler graphic without the file extension.\n    var battlerName = 'BaelSAN';\n  }\n  // Changes the character image to the setting applied from above.\n  user.setCharacterImage(charName, charIndex);\n  // Changes the face image to the setting applied from above.\n  user.setFaceImage(faceName, faceIndex);\n  // Changes the battler image from the setting applied from above.\n  user.setBattlerImage(battlerName);\n  // Refreshes the user's appearance.\n  user.refresh();\n}\n</Custom Apply Effect>\n\n<Custom Remove Effect>\n// Retrieve archived settings.\nvar charName = user._prevCharName;\nvar charIndex = user._prevCharIndex;\nvar faceName = user._prevFaceName;\nvar faceIndex = user._prevFaceIndex;\nvar battlerName = user._prevBattlerName;\n// Changes the character image to the archived setting.\nuser.setCharacterImage(charName, charIndex);\n// Changes the face image to the archived setting.\nuser.setFaceImage(faceName, faceIndex);\n// Changes the battler image from the archived setting.\nuser.setBattlerImage(battlerName);\n// Clear archived data.\nuser._priorityCharacterName = undefined;\nuser._priorityCharacterIndex = undefined;\nuser._prevFaceName = undefined;\nuser._prevFaceIndex = undefined;\nuser._priorityFaceName = undefined;\nuser._priorityFaceIndex = undefined;\nuser._prevFaceName = undefined;\nuser._prevFaceIndex = undefined;\nuser._priorityBattlerName = undefined;\nuser._prevBattlerName = undefined;\n// Refreshes the user's appearance.\nuser.refresh();\n</Custom Remove Effect>\n\n","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":122,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":31,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Taunt Focus","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":123,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Gears of War","note":"<Custom Passive Condition>\n// Check if the party is in battle.\nif ($gameParty.inBattle()) {\n  // Default the user's trance state to false.\n  user._trance = user._trance || false;\n  // Sets the condition for the user to be either in the trance state or if the user's TP matches the user's MaxTP.\n  condition = user._trance || user.tp === user.maxTp();\n} else {\n  // Otherwise, the condition is false.\n  condition = false;\n}\n// If the condition passes...\nif (condition) {\n  // And if the user isn't in the trance state...\n  if (!user._trance) {\n    // Then play an animation as the user enters trance.\n    user.startAnimation(239);\n    user.addState(124);\n  }\n  // Set the user's trance state to true.\n  user._trance = true;\n}\n</Custom Passive Condition>\n\n<Custom Regenerate Effect>\nif (user.tp === 0) {\n  // ...then turn off trance.\n  user._trance = false;\n  user.removeState(124);\n}\n<Custom Regenerate Effect>\n\n","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":124,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[{"code":21,"dataId":2,"value":1.15},{"code":21,"dataId":3,"value":1.15},{"code":21,"dataId":4,"value":1.15},{"code":21,"dataId":5,"value":1.15},{"code":21,"dataId":6,"value":1.15},{"code":21,"dataId":7,"value":1.15},{"code":34,"dataId":0,"value":0.2},{"code":23,"dataId":4,"value":0},{"code":23,"dataId":1,"value":2},{"code":23,"dataId":5,"value":0},{"code":43,"dataId":192,"value":1},{"code":43,"dataId":194,"value":1},{"code":43,"dataId":196,"value":1}],"iconIndex":83,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Gears of War Eff","note":"<Ignore Physical Taunt>\n<Ignore Magical Taunt>\n<Ignore Certain Taunt>\n<Skill Tier 1 Slots: +3>\n\n\n<Custom Apply Effect>\nvar selfid = origin.actorId();\nif ($gameActors.actor(selfid).battleSkillsRaw().contains(191)) {\nvar freeslot = $gameActors.actor(selfid).getEquipSkillTierCount(1);\nfreeslot += 1;\n$gameActors.actor(selfid).equipSkill(192,freeslot);\n}\nif ($gameActors.actor(selfid).battleSkillsRaw().contains(193)) {\nvar freeslot = $gameActors.actor(selfid).getEquipSkillTierCount(1);\nfreeslot += 1;\n$gameActors.actor(selfid).equipSkill(194,freeslot);\n}\nif ($gameActors.actor(selfid).battleSkillsRaw().contains(195)) {\nvar freeslot = $gameActors.actor(selfid).getEquipSkillTierCount(1);\nfreeslot += 1;\n$gameActors.actor(selfid).equipSkill(196,freeslot);\n}\n</Custom Apply Effect>\n\n<Custom Leave Effect>\nvar selfid = origin.actorId();\n$gameActors.actor(selfid).equipSkill(192);\n$gameActors.actor(selfid).equipSkill(194);\n$gameActors.actor(selfid).equipSkill(196);\n</Custom Leave Effect>\n\n<Custom Remove Effect>\nvar selfid = origin.actorId();\n$gameActors.actor(selfid).equipSkill(192);\n$gameActors.actor(selfid).equipSkill(194);\n$gameActors.actor(selfid).equipSkill(196);\n</Custom Remove Effect>\n\n<Custom Confirm Effect>\nif (this.isSkill() && !this.isAttack() && this.isHpEffect()) {\n  // Increase the damage by a multiplier.\n  value *= 3;\n  // Round up the damage.\n  value = Math.ceil(value);\n}\n</Custom Confirm Effect>\n\n\n\n<Custom Action End Effect>\nvar action = user.currentAction();\nif (action.isSkill() && !action.isAttack() && action.isHpEffect()) {\nif (user.skillHpCost(action.item()) > 0 ) {\nvar hpvar = user.skillHpCost(action.item());\nuser.gainHp(hpvar);\n}\n// Remove the state.\n  user.gainTp(-100);\n  user._trance = false;\n  user.removeState(124);\n}\n</Custom Action End Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":125,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Global Skill Log","note":"<Ally Aura: 126>\n<Foe Aura: 126>\n\n<Custom Action Start Effect>\nvar action = user.currentAction();\nuser._lastUsedSkill = user._lastUsedSkill || 1;\nif (action && action.isSkill()) {\n  user._lastUsedSkill = action.item().id;\n}\n</Custom Action Start Effect>","overlay":0,"priority":99,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":126,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Global Skill Log","note":"<Custom Action Start Effect>\nvar action = user.currentAction();\nuser._lastUsedSkill = user._lastUsedSkill || 1;\nif (action && action.isSkill()) {\n  user._lastUsedSkill = action.item().id;\n}\n</Custom Action Start Effect>","overlay":0,"priority":99,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":127,"autoRemovalTiming":1,"chanceByDamage":100,"traits":[{"code":23,"dataId":4,"value":0}],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"Treachery Boost","note":"<Custom Confirm Effect>\nif (value > 0) {\nvalue *= 2;\n} else if (value < 0) {\nvar shieldamt = Math.ceil(value*0.5)*-1;\nvalue = Math.ceil(value*1.5);\ntarget.gainBarrier(shieldamt, 3);\n} else {\nuser.gainTp(20);\n}\n</Custom Confirm Effect>\n\n<Custom Action End Effect>\nuser.removeState(127);\n</Custom Action End Effect>","overlay":0,"priority":50,"removeAtBattleEnd":true,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":128,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":129,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":130,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":131,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":132,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":133,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":134,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":135,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":136,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":137,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":138,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":139,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":140,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":141,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":142,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":143,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":144,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":145,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":146,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":147,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":148,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":149,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100},
{"id":150,"autoRemovalTiming":0,"chanceByDamage":100,"traits":[],"iconIndex":0,"maxTurns":1,"message1":"","message2":"","message3":"","message4":"","minTurns":1,"motion":0,"name":"","note":"","overlay":0,"priority":50,"removeAtBattleEnd":false,"removeByDamage":false,"removeByRestriction":false,"removeByWalking":false,"restriction":0,"stepsToRemove":100}
]