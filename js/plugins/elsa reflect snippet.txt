if ($gameVariables.value(26) === 0) {$gameVariables.setValue(26,[]);};
var proj = $gameMap._events.filter(function(event) { return event._tool.enabled == true; });
proj = proj.filter(function(event) { return event._tool.user == $gamePlayer; });
proj = proj.filter(function(event) { return event._tool.skill.multipleElements.includes(6); });
proj = proj.filter(function(event) { return event._tool.skill.chronoReflectable == true; });
proj = proj.filter(function(event) { return !$gameVariables.value(26).includes(event) });
if (proj.length) {
this.turnTowardPoint(proj[0].x, proj[0].y);
this.act(117);
$gameVariables.value(26).push(proj[0]);
} else {
$gameSelfVariables.set(this, 1, 0);
};


if ($gameVariables.value(26) === 0) {$gameVariables.setValue(26,[]);};
var proj = $gameMap._events.filter(function(event) { return event._tool.enabled == true; });
proj = proj.filter(function(event) { return event._tool.user == $gamePlayer; });
proj = proj.filter(function(event) { return event._tool.skill.multipleElements.includes(6); });
proj = proj.filter(function(event) { return !$gameVariables.value(26).includes(event) });
if (proj.length) {
var nex1 = [6]; 
if (proj[0]._tool.skill.chronoReflectable == true) {
nex1.push(10);
};
var nex2 = nex1[Math.randomInt(nex1.length)];
$gameSelfVariables.set(this, 1, nex2);
} else {
$gameVariables.setValue(26,[]);
};