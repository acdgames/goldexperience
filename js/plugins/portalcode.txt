if ($gameVariables.value(25) === 0) {$gameVariables.setValue(25,[]);};
  switch (this._direction) {
  case 2:
  if ($gameMap.regionId(this.x,this.y+1) !== 9) {
  this.moveForward();
  };
  break;
  case 4:
  if ($gameMap.regionId(this.x-1,this.y) !== 9) {
  this.moveForward();
  };
  break;
  case 6:
  if ($gameMap.regionId(this.x+1,this.y) !== 9) {
  this.moveForward();
  };
  break;
  case 8:
  if ($gameMap.regionId(this.x,this.y-1) !== 9) {
  this.moveForward();
  };
  break;
  }
var othev = $gameMap.eventsXy(this._x, this._y).filter(function(event) { return event._tool.enabled == true; });
var othev = othev.filter(function(event) { return event._dataEventId !== 110; });
var othev = othev.filter(function(event) { return event._tool.skill.multipleElements.includes(10); });
if (($gamePlayer.x == this._x) && ($gamePlayer.y == this._y)) {
othev.push($gamePlayer);
}
$gameVariables.value(25).forEach(function(element) {
if (othev.includes(element[0])){
othev.splice(othev.indexOf(element),1);
};
if (element[2] == 0) {
 if (element[1] > 0) {
element[1]--;
} else {
$gameVariables.value(25).splice($gameVariables.value(25).indexOf(element),1);
};
}
});
var portals = $gameMap._events.filter(function(event) { return event._tool.enabled == true; });
var portals = portals.filter(function(event) { return event._dataEventId == 111; });
if (portals.length) {
if ((portals[0].x == this._x) && (portals[0].y == this._y)) {  
  switch (portals[0]._direction) {
  case 2:
  portals[0].setDirection(8);
  portals[0].moveForward();
  break;
  case 4:
  portals[0].setDirection(6);
  portals[0].moveForward();
  break;
  case 6:
  portals[0].setDirection(4);
  portals[0].moveForward();
  break;
  case 8:
  portals[0].setDirection(2);
  portals[0].moveForward();
  break;
  }
}
  $gameVariables.value(25).push([this,30,0]);
othev.forEach(function(element) {
if ($gameMap.isPassable(portals[0].x,portals[0].y,portals[0].direction) || element._through == true) {
  $gameVariables.value(25).push([element,30,0]);
  console.log(element._dataEventId);
  element.teleportToPoint(portals[0].x, portals[0].y);
  switch (portals[0]._direction) {
  case 2:
  element.setDirection(8);
  break;
  case 4:
  element.setDirection(6);
  break;
  case 6:
  element.setDirection(4);
  break;
  case 8:
  element.setDirection(2);
  break;
  }
  }
});
}